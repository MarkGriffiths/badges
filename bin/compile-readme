#! /usr/bin/env node
'use strict'

function _interopDefault(ex) {
	return (ex && (typeof ex === 'object') && 'default' in ex) ? ex.default : ex
}

var _template = _interopDefault(require('lodash/template'))
var path = require('path')
var fs = require('fs')
var trucolor = _interopDefault(require('trucolor'))
var truwrap = _interopDefault(require('truwrap'))
var commonTags = require('common-tags')
var _thebespokepixel_string = require('@thebespokepixel/string')
var meta = _interopDefault(require('@thebespokepixel/meta'))
var yargs = _interopDefault(require('yargs'))
var updateNotifier = _interopDefault(require('update-notifier'))
var verbosity = require('verbosity')
var remark = _interopDefault(require('remark'))
var addUsage = _interopDefault(require('remark-usage'))
var _defaults = _interopDefault(require('lodash/defaults'))
var _forIn = _interopDefault(require('lodash/forIn'))
var _map = _interopDefault(require('lodash/map'))
var _isObject = _interopDefault(require('lodash/isObject'))
var pkgConf = _interopDefault(require('pkg-conf'))
var readPkg = _interopDefault(require('read-pkg-up'))
var node = _interopDefault(require('unist-builder'))
var squeeze = _interopDefault(require('remark-squeeze-paragraphs'))
var _upperFirst = _interopDefault(require('lodash/upperFirst'))
var urlencode = _interopDefault(require('urlencode'))
var semver = require('semver')

var name = '@thebespokepixel/badges'
var version = '0.0.1'
var description = 'documentation/readme badge generation and management'
var main = 'index.js'
var bin = {
	'compile-readme': './bin/compile-readme'
}
var directories = {
	'test': 'test'
}
var files = ['index.js', 'lib']
var scripts = {
	'test': 'xo && snyk test && ava',
	'doc-serve': 'documentation serve --watch --theme node_modules/documentation-theme-bespoke --github --config src/docs/documentation.yml --name $npm_package_name  --project-version $npm_package_version src/index.js',
	'doc-build': 'documentation build --format html --output docs --theme node_modules/documentation-theme-bespoke --github --config src/docs/documentation.yml --name $npm_package_name  --project-version $npm_package_version src/index.js',
	'code-climate': 'nyc report --reporter=text-lcov | codeclimate-test-reporter',
	'coverage': 'nyc ava && nyc report --reporter=lcov --report-dir test/coverage; open test/coverage/lcov-report/index.html',
	'clean': 'gulp clean',
	'postpublish': 'greenkeeper-postpublish'
}
var repository = {
	'type': 'git',
	'url': 'git+https://github.com/MarkGriffiths/badges.git'
}
var keywords = ['readme', 'badges', 'documentation', 'docs']
var author = 'Mark Griffiths <mark@thebespokepixel.com> (http://thebespokepixel.com/)'
var license = 'MIT'
var bugs = {
	'url': 'https://github.com/MarkGriffiths/badges/issues'
}
var homepage = 'https://github.com/MarkGriffiths/badges#readme'
var dependencies = {
	'@thebespokepixel/meta': '^0.1.3',
	'@thebespokepixel/string': '^0.4.0',
	'app-root-path': '^2.0.1',
	'common-tags': '^1.3.1',
	'lodash': '^4.16.4',
	'mdast-util-inject': '^1.1.0',
	'pkg-conf': '^2.0.0',
	'read-pkg-up': '^2.0.0',
	'remark': '^6.0.1',
	'remark-squeeze-paragraphs': '^3.0.0',
	'remark-usage': '^4.0.1',
	'semver': '^5.3.0',
	'trucolor': '^0.5.5',
	'truwrap': '^0.6.3',
	'unist-builder': '^1.0.2',
	'update-notifier': '^1.0.2',
	'urlencode': '^1.1.0',
	'verbosity': '^0.7.1',
	'yargs': '^6.0.0'
}
var devDependencies = {
	'@thebespokepixel/cordial': '^0.16.4',
	'ava': '^0.16.0',
	'codeclimate-test-reporter': '^0.4.0',
	'documentation': '^4.0.0-beta10',
	'documentation-theme-bespoke': '^0.2.1',
	'greenkeeper-postpublish': '^1.0.1',
	'gulp': 'github:gulpjs/gulp#4.0',
	'nyc': '^8.3.1',
	'snyk': '^1.19.1',
	'xo': '^0.17.0'
}
var xo = {
	'semicolon': false,
	'esnext': true
}
var badges = {
	'github': 'MarkGriffiths',
	'npm': 'thebespokepixel',
	'name': 'badges',
	'style': 'flat',
	'providers': {
		'bespoke': {
			'title': 'status',
			'text': 'beta',
			'color': 'blue'
		}
	},
	'readme': {
		'Status': [['bespoke', 'npm', 'travis', 'david'], ['code-climate', 'code-climate-coverage', 'snyk']],
		'Developer': ['david-dev', 'rollup'],
		'Help': ['inch', 'gitter']
	},
	'docs': ['bespoke']
}
var buildNumber = 10
var engines = {
	'node': '>=4.0 <7.0'
}
var pkg = {
	name: name,
	version: version,
	description: description,
	main: main,
	bin: bin,
	directories: directories,
	files: files,
	scripts: scripts,
	repository: repository,
	keywords: keywords,
	author: author,
	license: license,
	bugs: bugs,
	homepage: homepage,
	dependencies: dependencies,
	devDependencies: devDependencies,
	xo: xo,
	badges: badges,
	buildNumber: buildNumber,
	engines: engines,
	'jsnext:main': 'lib/index-es.js'
}

function render$1(config) {
	const badgeNode = node('image', {
		alt: _upperFirst(config.title),
		url: `http://img.shields.io/badge/${config.title}-${config.text}-${config.color}.svg?style=${config.style}`
	})

	if (config.link) {
		return node('paragraph', [node('link', {
			title: _upperFirst(config.title),
			url: config.link
		}, [badgeNode]), node('text', ' ')])
	}

	return node('paragraph', [badgeNode, node('text', ' ')])
}

function cc(config, user) {
	return node('paragraph', [node('link', {
		title: _upperFirst(config.title),
		url: `https://codeclimate.com/github/${user.github.slug}`
	}, [node('image', {
		alt: _upperFirst(config.title),
		url: `https://codeclimate.com/github/${user.github.slug}/badges/gpa.svg?style=${config.style}`
	})]), node('text', ' ')])
}

function ccCoverage(config, user) {
	return node('paragraph', [node('link', {
		title: _upperFirst(config.title),
		url: `https://codeclimate.com/coverage/github/${user.github.slug}`
	}, [node('image', {
		alt: _upperFirst(config.title),
		url: `https://codeclimate.com/github/${user.github.slug}/badges/coverage.svg?style=${config.style}`
	})]), node('text', ' ')])
}

function david(config, user) {
	return node('paragraph', [node('link', {
		title: _upperFirst(config.title),
		url: `https://david-dm.org/${user.github.slug}/${config.branch}`
	}, [node('image', {
		alt: _upperFirst(config.title),
		url: `https://img.shields.io/david/${user.github.slug}.svg?branch=${config.branch}&style=${config.style}`
	})]), node('text', ' ')])
}

function davidDev(config, user) {
	return node('paragraph', [node('link', {
		title: _upperFirst(config.title),
		url: `https://david-dm.org/${user.github.slug}/${config.branch}#info=devDependencies`
	}, [node('image', {
		alt: _upperFirst(config.title),
		url: `https://img.shields.io/david/dev/${user.github.slug}.svg?branch=${config.branch}&style=${config.style}`
	})]), node('text', ' ')])
}

function render$2(config, user) {
	return node('paragraph', [node('link', {
		title: _upperFirst(config.title),
		url: `https://gitter.im/${user.github.user}/${config.room}?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge`
	}, [node('image', {
		alt: _upperFirst(config.title),
		url: `https://img.shields.io/gitter/room/${user.github.user}/${config.room}.svg?style=${config.style}`
	})]), node('text', ' ')])
}

function render$3(config, user) {
	return node('paragraph', [node('link', {
		title: _upperFirst(config.title),
		url: `https://inch-ci.org/github/${user.github.slug}`
	}, [node('image', {
		alt: _upperFirst(config.title),
		url: `https://inch-ci.org/github/${user.github.slug}.svg?branch=${config.branch}&style=${config.style}`
	})]), node('text', ' ')])
}

function renderIcon(id) {
	const iconSource = fs.readFileSync(`./icons/${id}.svg`)
	const iconBuffer = semver.gte(process.version, '6.0.0') ? Buffer.from(iconSource) : new Buffer(iconSource)

	return `&logo=${urlencode(`data:image/svg+xml;base64,${iconBuffer.toString('base64')}`)}`
}

function render$4(config, user) {
	return node('paragraph', [node('link', {
		title: config.title,
		url: `https://www.npmjs.com/package/${user.fullName}`
	}, [node('image', {
		alt: config.title,
		url: `https://img.shields.io/npm/v/${user.fullName}.svg?style=${config.style}${config.icon && renderIcon('npm')}`
	})]), node('text', ' ')])
}

function render$5(config, user) {
	return node('paragraph', [node('link', {
		title: _upperFirst(config.title),
		url: `https://github.com/rollup/rollup/wiki/jsnext:main`
	}, [node('image', {
		alt: _upperFirst(config.title),
		url: `https://img.shields.io/badge/es2015-${urlencode('jsnext:main_âœ”')}-64CA39.svg?style=${config.style}${config.icon && renderIcon('rollup')}`
	})]), node('text', ' ')])
}

function render$6(config, user) {
	return node('paragraph', [node('link', {
		title: _upperFirst(config.title),
		url: `https://snyk.io/test/github/${user.github.slug}`
	}, [node('image', {
		alt: _upperFirst(config.title),
		url: `https://snyk.io/test/github/${user.github.slug}/badge.svg?style=${config.style}`
	})]), node('text', ' ')])
}

function render$7(config, user) {
	return node('paragraph', [node('link', {
		title: _upperFirst(config.title),
		url: `https://travis-ci.org/${user.github.slug}`
	}, [node('image', {
		alt: _upperFirst(config.title),
		url: `https://img.shields.io/travis/${user.github.slug}.svg?branch=${config.branch}&style=${config.style}`
	})]), node('text', ' ')])
}

const services = {
	bespoke: render$1,
	gitter: render$2,
	'code-climate': cc,
	'code-climate-coverage': ccCoverage,
	david,
	'david-dev': davidDev,
	inch: render$3,
	npm: render$4,
	rollup: render$5,
	snyk: render$6,
	travis: render$7
}

function parseQueue(collection, providers, user) {
	if (Array.isArray(collection)) {
		const badges = collection.map(content => parseQueue(content, providers, user))
		badges.push(node('break'))
		return node('paragraph', badges)
	}
	if (_isObject(collection)) {
		return _map(collection, (content, title) => {
			return node('root', [node('heading', {
				depth: 5
			}, [node('text', title)]), parseQueue(content, providers, user)])
		})
	}
	if (!services[collection]) {
		throw new Error(`${collection} not found`)
	}
	return services[collection](providers[collection], user)
}

function render(context) {
	return Promise.all([pkgConf('badges'), readPkg()]).then(configArray => {
		const config = configArray[0]
		const pkg = configArray[1].pkg
		if (!config.name || !config.github || !config.npm) {
			throw new Error('Badges requires at least a package name, github repo and npm user account.')
		}
		if (!config[context]) {
			throw new Error(`${context} is not provided in package.json.`)
		}
		if (!config.providers) {
			throw new Error('At least one badge provider must be specified.')
		}

		return {
			user: {
				name: config.name,
				fullName: pkg.name,
				scoped: /^@.+?\//.test(pkg.name),
				github: {
					user: config.github,
					slug: `${config.github}/${config.name}`
				},
				npm: {
					user: config.npm
				}
			},
			providers: _forIn(_defaults(config.providers, {
				bespoke: {
					title: 'bespoke',
					text: 'badge',
					color: 'red',
					link: false
				},
				gitter: {
					title: 'gitter',
					room: 'help'
				},
				'code-climate': {
					title: 'code-climate'
				},
				'code-climate-coverage': {
					title: 'coverage'
				},
				david: {
					title: 'david',
					branch: 'master'
				},
				'david-dev': {
					title: 'david-developer',
					branch: 'master'
				},
				inch: {
					title: 'inch',
					branch: 'master',
					style: 'shields'
				},
				npm: {
					title: 'npm',
					icon: true
				},
				rollup: {
					title: 'rollup',
					icon: true
				},
				snyk: {
					title: 'snyk'
				},
				travis: {
					title: 'travis',
					branch: 'master'
				}
			}), value => _defaults(value, {
				style: config.style || 'flat',
				icon: false
			})),
			queue: config[context]
		}
	}).then(config => {
		return node('root', parseQueue(config.queue, config.providers, config.user))
	}).then(md => remark().use(squeeze).stringify(md))
}

const console = verbosity.createConsole({
	outStream: process.stderr
})
const clr = trucolor.simplePalette()
const metadata = meta()

const renderer = truwrap({
	right: 4,
	outStream: process.stderr
})

const colorReplacer = new commonTags.TemplateTag(commonTags.replaceSubstitutionTransformer(/([a-zA-Z]+?)[:/|](.+)/, (match, colorName, content) => `${clr[colorName]}${content}${clr[colorName].out}`))

const title = _thebespokepixel_string.box(colorReplacer`${'title|compile-readme'}${`dim| â”‚ ${metadata.version(3)}`}`, {
	borderColor: 'yellow',
	margin: {
		top: 1
	},
	padding: {
		bottom: 0,
		top: 0,
		left: 2,
		right: 2
	}
})

const usage = commonTags.stripIndent(colorReplacer)`${title}

	Inject project badges into a tagged markdown-formatted source file.

	Usage:
	${'command|compile-readme'} ${'option|[options]'} ${'operator|>'} ${'argument|outputFile'}`

const epilogue = colorReplacer`${'green|Â© 2016'} ${'brightGreen|The Bespoke Pixel.'} ${'grey|Released under the MIT License.'}`

yargs.strict().options({
	h: {
		alias: 'help',
		describe: 'Display help.'
	},
	v: {
		alias: 'version',
		count: true,
		describe: 'Print version to stdout. -vv Print name & version.'
	},
	V: {
		alias: 'verbose',
		count: true,
		describe: 'Be verbose. -VV Be loquacious.'
	},
	c: {
		alias: 'context',
		default: 'readme',
		describe: 'The named badges context in package.json.'
	},
	u: {
		alias: 'usage',
		describe: 'Path to a usage example (see `npm home remark-usage`)'
	},
	color: {
		describe: 'Force color output. Disable with --no-color'
	}
}).wrap(renderer.getWidth())

const argv = yargs.argv

if (!(process.env.USER === 'root' && process.env.SUDO_USER !== process.env.USER)) {
	updateNotifier({
		pkg
	}).notify()
}

if (argv._.length === 0) {
	argv.help = true
}

if (argv.help) {
	renderer.write(usage)
	renderer.break(2)
	renderer.write(yargs.getUsageInstance().help())
	renderer.break()
	renderer.write(epilogue)
	renderer.break(1)
	process.exit(0)
}

if (argv.version) {
	process.stdout.write(metadata.version(argv.version))
	process.exit(0)
}

if (argv.verbose) {
	switch (argv.verbose) {
		case 1:
			console.verbosity(4)
			console.log(`${clr.title}Verbose mode${clr.title.out}:`)
			break
		case 2:
			console.verbosity(5)
			console.log(`${clr.title}Extra-Verbose mode${clr.title.out}:`)
			console.yargs(argv)
			break
		default:
			console.verbosity(3)
	}
}

const source = path.resolve(argv._[0])
console.debug('Source path:', source)

const template = _template(fs.readFileSync(source))

render(argv.context).then(badges => template({
	badges
})).then(md => {
	if (argv.usage) {
		remark().use(addUsage, {
			example: path.resolve(argv.usage)
		}).process(md, (err, vfile) => {
			if (err) {
				throw new Error(err)
			}
			process.stdout.write(vfile.contents)
		})
	} else {
		process.stdout.write(md)
	}
})
